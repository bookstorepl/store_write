buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
        gradleDockerVersion = '0.13.0'
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-milestone' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}")
    }
}

group = 'ampw'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

version =  '0.1.0'

bootJar {
    baseName = 'store-write'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile group: 'org.apache.kafka', name: 'kafka-streams', version: '2.0.0'
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.0.0'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

task deployImage(){
    group = 'ampw'
    doLast {
        def imageName = "${bootJar.baseName}"
        def logsFolder = "C:\\dockers\\logs\\StoreWrite:/var/log"
        def containerName = "${project.group}/${bootJar.baseName}"
        "docker kill ${containerName}".execute()
        "docker rm -f ${containerName}".execute()
        print("calling method: ")
        println("docker run --rm -d -v ${logsFolder} --name=${imageName} ${containerName}")
        "docker run --rm -d -v ${logsFolder} --name=${imageName} ${containerName}".execute()
    }
}